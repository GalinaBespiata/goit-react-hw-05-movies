{"version":3,"file":"static/js/245.1dcbdfa3.chunk.js","mappings":"kLACA,EAA4B,4B,SCIfA,EAAW,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnC,OACE,yBACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAI,OAAEF,QAAF,IAAEA,EAAAA,EAAY,KAAOG,GAAE,kBAAaL,GAAvD,UACE,cAAGM,UAAWC,EAAd,SAA8BN,OAIrC,ECZD,EAA4B,6BCGfO,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOP,EAAe,EAAfA,SACjC,OACE,0BACE,eAAII,UAAWC,EAAf,SACGE,EAAMC,KAAI,YAAmB,IAAhBV,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAChB,OAAO,SAACF,EAAD,CAAUG,SAAUA,EAAmBF,GAAIA,EAAIC,KAAMA,GAAlBD,EAC3C,OAIR,C,6HCZYW,EAAe,mCAAG,WAAMC,GAAN,yFACNC,EAAAA,EAAAA,IAAA,6IACiHD,IAF3G,uBACrBE,EADqB,EACrBA,KADqB,kBAItBA,EAAKC,QAAQL,KAAI,YACtB,MAAO,CAAEV,GADgC,EAAhBA,GACZC,KAD4B,EAAZe,MAE9B,KAN4B,2CAAH,sD,iBCD5B,EAAyB,2BAAzB,EAA8D,4BAA9D,EAAsG,8BAAtG,EAAkL,wB,SCIrKC,EAAa,WACxB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BC,EAAAA,EAAAA,MAAnBC,GAAT,eAiBA,OACE,kBAAMhB,UAAWC,EAAYgB,SATV,SAAAC,GACnBA,EAAIC,iBAEJH,EAAgB,CAAEV,MAAOO,IAVzBC,EAAQ,GAaT,EAGC,WACE,8BACE,iBAAMd,UAAWC,EAAjB,sCACA,kBACED,UAAWC,EACXmB,MAAOP,EACPQ,KAAK,OACL1B,KAAK,OACL2B,QAAQ,yHACRZ,MAAM,yIACNa,UAAQ,EACRC,SAzBkB,SAAAN,GAExBJ,EAAQI,EAAIO,OAAOL,MACpB,QA0BG,mBAAQpB,UAAWC,EAASoB,KAAK,SAAjC,sBAKL,E,kBCrCc,SAASK,IACtB,OAA8Bd,EAAAA,EAAAA,WAAS,GAAvC,eAAOe,EAAP,KAAgBC,EAAhB,KACA,GAAqBhB,EAAAA,EAAAA,UAAS,MAArBiB,GAAT,eAEA,GAA0BjB,EAAAA,EAAAA,UAAS,IAAnC,eAAOT,EAAP,KAAc2B,EAAd,KAEA,GAAuBf,EAAAA,EAAAA,MACjBT,GADN,eAC2ByB,IAAI,SACzBnC,GAAWoC,EAAAA,EAAAA,MAmBjB,OAjBAC,EAAAA,EAAAA,YAAU,WACR,GAAK3B,EAAL,CACA,IAAM4B,EAAW,mCAAG,oGAEhBN,GAAW,GAFK,SAIGvB,EAAgBC,GAJnB,OAIVE,EAJU,OAKhBsB,EAAStB,GALO,gDAOhBqB,EAAS,KAAMM,SAPC,yBAShBP,GAAW,GATK,4EAAH,qDAYjBM,EAAY5B,EAbM,CAcnB,GAAE,CAACA,KAGF,2BACGqB,IAAW,SAACS,EAAA,EAAD,KACZ,SAACzB,EAAD,IAECR,EAAMkC,OAAS,IAAK,SAACnC,EAAA,EAAD,CAAWC,MAAOA,EAAOP,SAAUA,MAG7D,C","sources":["webpack://goit-react-hw-05-movies/./src/components/FilmItem/FilmItem.module.css?43a2","components/FilmItem/FilmItem.jsx","webpack://goit-react-hw-05-movies/./src/components/FilmsWrap/FilmsWrap.module.css?d199","components/FilmsWrap/FilmsWrap.jsx","components/ApiFetch/FetchFilmIByWord.jsx","webpack://goit-react-hw-05-movies/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","components/pages/MoviesPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"trendFilm\":\"FilmItem_trendFilm__n9shB\"};","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport css from '../FilmItem/FilmItem.module.css';\n\nexport const FilmItem = ({ id, name, location }) => {\n  return (\n    <li>\n      <Link state={{ from: location ?? '/' }} to={`/movies/${id}`}>\n        <p className={css.trendFilm}>{name}</p>\n      </Link>\n    </li>\n  );\n};\n\nFilmItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n\n  location: PropTypes.shape({\n    state: PropTypes.shape().isRequired,\n  }),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filmsWrap\":\"FilmsWrap_filmsWrap__oA9TV\"};","import PropTypes, { number, string } from 'prop-types';\nimport { FilmItem } from 'components/FilmItem/FilmItem.jsx';\nimport css from '../FilmsWrap/FilmsWrap.module.css';\n\nexport const FilmsWrap = ({ films, location }) => {\n  return (\n    <div>\n      <ul className={css.filmsWrap}>\n        {films.map(({ id, name }) => {\n          return <FilmItem location={location} key={id} id={id} name={name} />;\n        })}\n      </ul>\n    </div>\n  );\n};\nFilmsWrap.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: number.isRequired,\n      name: string.isRequired,\n    }).isRequired\n  ).isRequired,\n\n  location: PropTypes.shape({\n    state: PropTypes.shape().isRequired,\n  }),\n};\n","import axios from 'axios';\n\nexport const FetchFilmByWord = async query => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=004aa31770cc2729c6dd319813b8b5dc&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return data.results.map(({ id, title }) => {\n    return { id, name: title };\n  });\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formEl\":\"SearchForm_formEl__qU18Y\",\"inputEl\":\"SearchForm_inputEl__4pco6\",\"labelName\":\"SearchForm_labelName__yWZR5\",\"labelTel\":\"SearchForm_labelTel__FdaSE\",\"btn\":\"SearchForm_btn__TXrR3\"};","import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport css from '../SearchForm/SearchForm.module.css';\n\nexport const SearchForm = () => {\n  const [film, setFilm] = useState('');\n  const [, setSearchParams] = useSearchParams();\n  const reset = () => {\n    setFilm('');\n  };\n  const handleInputChange = evt => {\n    \n    setFilm(evt.target.value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    setSearchParams({ query: film });\n\n    reset();\n  };\n\n  return (\n    <form className={css.formEl} onSubmit={handleSubmit}>\n      <label>\n        <span className={css.labelName}>What film do you search</span>\n        <input\n          className={css.inputEl}\n          value={film}\n          type=\"text\"\n          name=\"film\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleInputChange}\n        />\n      </label>\n\n      <button className={css.btn} type=\"submit\">\n        Search\n      </button>\n    </form>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { FetchFilmByWord } from '../ApiFetch/FetchFilmIByWord.jsx';\nimport { FilmsWrap } from 'components/FilmsWrap/FilmsWrap.jsx';\nimport { SearchForm } from '../SearchForm/SearchForm.jsx';\nimport { useSearchParams, useLocation } from 'react-router-dom';\n\nimport { Loader } from '../Loader/Loader.jsx';\n\nexport default function MoviesPage() {\n  const [loading, setLoading] = useState(false);\n  const [, setError] = useState(null);\n\n  const [films, setFilms] = useState([]);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!query) return;\n    const fetchMovies = async () => {\n      try {\n        setLoading(true);\n\n        const data = await FetchFilmByWord(query);\n        setFilms(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovies(query);\n  }, [query]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      <SearchForm />\n\n      {films.length > 0 && <FilmsWrap films={films} location={location} />}\n    </div>\n  );\n}\n"],"names":["FilmItem","id","name","location","state","from","to","className","css","FilmsWrap","films","map","FetchFilmByWord","query","axios","data","results","title","SearchForm","useState","film","setFilm","useSearchParams","setSearchParams","onSubmit","evt","preventDefault","value","type","pattern","required","onChange","target","MoviesPage","loading","setLoading","setError","setFilms","get","useLocation","useEffect","fetchMovies","message","Loader","length"],"sourceRoot":""}