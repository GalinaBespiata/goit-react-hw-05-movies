{"version":3,"file":"static/js/387.6cda7281.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/pages/FilmPage.module.css?a0f4","components/ApiFetch/FetchFilmInfo.jsx","components/ApiFetch/FetchActorsOfFilm.jsx","components/pages/CastsPage/CastsPage.jsx","components/ApiFetch/FetchReviews.jsx","components/pages/Reviews/ReviewsPage.jsx","components/pages/FilmPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"itemBlock\":\"FilmPage_itemBlock__TYUPy\",\"posterBlock\":\"FilmPage_posterBlock__jsBjl\",\"filmPoster\":\"FilmPage_filmPoster__cWIkn\",\"descriptionBlock\":\"FilmPage_descriptionBlock__ZGgay\",\"filmTitle\":\"FilmPage_filmTitle__VDi+s\",\"textTitle\":\"FilmPage_textTitle__go+RX\",\"linkTitle\":\"FilmPage_linkTitle__nvbiv\",\"filmOverview\":\"FilmPage_filmOverview__7H1Xn\",\"filmGenre\":\"FilmPage_filmGenre__wRqZO\",\"additionalInfo\":\"FilmPage_additionalInfo__7XoSN\",\"link\":\"FilmPage_link__fO1hF\"};","import axios from 'axios';\n\nexport const fetchFilmsInfo = async (filmId = '1') => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${filmId}?api_key=004aa31770cc2729c6dd319813b8b5dc&language=en-US`\n  );\n\n  return data;\n};\n","import axios from 'axios';\n\nexport const FetchActorsOfFilm = async movieId => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=004aa31770cc2729c6dd319813b8b5dc&language=en-US`\n  );\n\n  return data.cast.map(({ credit_id, character, id, name, profile_path }) => {\n    return { credit_id, character, id, name, profile_path };\n  });\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { FetchActorsOfFilm } from 'components/ApiFetch/FetchActorsOfFilm';\nimport { Loader } from 'components/Loader/Loader.jsx';\n\nexport const CastPage = () => {\n  const { movieId } = useParams();\n\n  const [loading, setLoading] = useState(false);\n  const [, setError] = useState(null);\n  const [castInfo, setCastInfo] = useState([]);\n\n  useEffect(() => {\n    const getData = async movieId => {\n      try {\n        setLoading(true);\n\n        const data = await FetchActorsOfFilm(movieId);\n\n        setCastInfo(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getData(movieId);\n  }, [movieId]);\n\n  const BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\n  return (\n    <>\n      {loading && <Loader />}\n      {castInfo.length > 0 ? (\n        <ul>\n          {castInfo.map(({ credit_id, character, id, name, profile_path }) => {\n            return (\n              <li key={credit_id} style={{ display: 'flex', margin: '20px' }}>\n                <img\n                  width={'50px'}\n                  src={`${BASE_URL}${profile_path}`}\n                  alt={castInfo.name}\n                />\n\n                <p style={{ marginLeft: '10px' }}> {name}</p>\n                <p> (Character {character})</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p style={{ margin: '10px' }}>We have not reviews for this movie now</p>\n      )}\n    </>\n  );\n};\n","import axios from 'axios';\n\nexport const FetchReviews = async movieId => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=004aa31770cc2729c6dd319813b8b5dc&language=en-US&page=1`\n  );\n\n  return data.results.map(({ id, author, content }) => {\n    return { id, author, content };\n  });\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { FetchReviews } from 'components/ApiFetch/FetchReviews.jsx';\nimport { Loader } from 'components/Loader/Loader.jsx';\n\nexport const ReviewsPage = () => {\n  const { movieId } = useParams();\n\n  const [loading, setLoading] = useState(false);\n  const [, setError] = useState(null);\n  const [reviewsInfo, setReviewsInfo] = useState([]);\n\n  useEffect(() => {\n    const getData = async movieId => {\n      try {\n        setLoading(true);\n\n        const data = await FetchReviews(movieId);\n\n        setReviewsInfo(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getData(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {reviewsInfo.length > 0 ? (\n        <ul>\n          {reviewsInfo.map(({ id, author, content }) => {\n            return (\n              <li key={id} style={{ display: 'flex', margin: '20px' }}>\n                <p>{author}</p>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p style={{margin: '10px'}}>We have not reviews for this movie now</p>\n      )}\n    </>\n  );\n};\n","import {\n  NavLink,\n  Link,\n  Route,\n  Routes,\n  useParams,\n  useLocation,\n} from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport css from '../pages/FilmPage.module.css';\nimport { fetchFilmsInfo } from '../ApiFetch/FetchFilmInfo.jsx';\nimport { CastPage } from './CastsPage/CastsPage.jsx';\nimport { ReviewsPage } from './Reviews/ReviewsPage';\nimport { Loader } from '../Loader/Loader.jsx';\n\nexport default function FilmPage() {\n  const { movieId } = useParams();\n\n  const [loading, setLoading] = useState(false);\n  const [, setError] = useState(null);\n  const [movieInfo, setMovieInfo] = useState(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!movieId) return;\n    const getData = async () => {\n      try {\n        setLoading(true);\n\n        const data = await fetchFilmsInfo(movieId);\n        setMovieInfo(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getData();\n  }, [movieId]);\n\n  const BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\n  if (movieInfo) {\n    const { title, vote_average, overview, genres, poster_path } = movieInfo;\n\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        {loading && <Loader />}\n        <Link to={location.state?.from ?? '/'} style={{ marginLeft: '20px' }}>\n          {' '}\n          Go back\n        </Link>\n        <div className={css.itemBlock}>\n          <div className={css.posterBlock}>\n            {poster_path ? (\n              <img\n                src={`${BASE_URL}${poster_path}`}\n                alt={title}\n                className={css.filmPoster}\n              />\n            ) : (\n              <p\n                style={{\n                  fontSize: '14px',\n                  marginTop: '20px',\n                  textAlign: 'center',\n                }}\n              >\n                There are NO poster , sorry ¯\\_( ͡❛ ͜ʖ ͡❛)_/¯\n              </p>\n            )}\n          </div>\n          <div className={css.descriptionBlock}>\n            <h2 className={css.filmTitle}>{title}</h2>\n            <p className={css.textTitle}>OverView</p>\n            <p>User score : {Math.round(vote_average)}/10</p>\n\n            <p className={css.filmOverview}>{overview}</p>\n            <p className={css.textTitle}>Genres</p>\n            {genres.map(({ id, name }) => {\n              return (\n                <p className={css.filmGenre} key={id}>\n                  {name}\n                </p>\n              );\n            })}\n          </div>\n        </div>\n        <div className={css.additionalInfo}>\n          <p className={css.linkTitle}>Additional information</p>\n          <NavLink\n            state={{ from: location.state?.from ?? '/' }}\n            to=\"casts\"\n            className={css.link}\n          >\n            Casts\n          </NavLink>\n          <NavLink\n            state={{ from: location.state?.from ?? '/' }}\n            to=\"reviews\"\n            className={css.link}\n          >\n            Reviews\n          </NavLink>\n          <Routes>\n            <Route path=\"casts\" element={<CastPage />} />\n            <Route path=\"reviews\" element={<ReviewsPage />} />\n          </Routes>\n        </div>\n      </div>\n    );\n  }\n}\n"],"names":["fetchFilmsInfo","filmId","axios","data","FetchActorsOfFilm","movieId","cast","map","credit_id","character","id","name","profile_path","CastPage","useParams","useState","loading","setLoading","setError","castInfo","setCastInfo","useEffect","getData","message","Loader","length","style","display","margin","width","src","alt","marginLeft","FetchReviews","results","author","content","ReviewsPage","reviewsInfo","setReviewsInfo","FilmPage","movieInfo","setMovieInfo","location","useLocation","title","vote_average","overview","genres","poster_path","flexDirection","to","state","from","className","css","fontSize","marginTop","textAlign","Math","round","path","element"],"sourceRoot":""}